<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.WorkshopMapper">
	<!-- 카테고리 -->
	<insert id="insertProgramCategory"
		parameterType="com.sp.app.model.Workshop">
		INSERT INTO programCategory (categoryId, categoryName)
		VALUES (programCategory_seq.NEXTVAL, #{categoryName})
	</insert>

	<update id="updateProgramCategory"
		parameterType="com.sp.app.model.Workshop">
		UPDATE programCategory
		SET categoryName = #{categoryName}
		WHERE categoryId = #{categoryId}
	</update>

	<delete id="deleteProgramCategory" parameterType="Long">
		DELETE FROM programCategory WHERE categoryId = #{value}
	</delete>

	<select id="listProgramCategory" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT categoryId, categoryName
		FROM programCategory
		ORDER BY categoryId DESC
		OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>

	<!-- 프로그램 -->
	<insert id="insertProgram"
		parameterType="com.sp.app.model.Workshop">
		INSERT INTO program (programId, categoryId, programTitle, programContent)
		VALUES (program_seq.NEXTVAL, #{categoryId}, #{programTitle},
		#{programContent})
	</insert>

	<select id="listProgram" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT p.programId, p.categoryId, c.categoryName, p.programTitle,
		p.programContent, p.regDate, p.updDate
		FROM program p
		JOIN programCategory c
		ON p.categoryId = c.categoryId
		<where>
			<include refid="where-list" />
		</where>
		ORDER BY regDate DESC, programId DESC
		OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>

	<!-- 검색 조건 -->
	<sql id="where-list">
		<trim prefixOverrides="AND">
			<if test="kwd != null and kwd != ''">
				AND (LOWER(programTitle) LIKE '%' || LOWER(#{kwd}) || '%'
				OR LOWER(programContent) LIKE '%' || LOWER(#{kwd}) || '%')
			</if>
			<if test="categoryId != null">
				AND categoryId = #{categoryId}
			</if>
		</trim>
	</sql>

	<!-- 총 개수 -->
	<select id="programDataCount">
		SELECT NVL(COUNT(*), 0)
		FROM program
		<where>
			<include refid="where-list" />
		</where>
	</select>

	<select id="findProgramById" parameterType="Long"
		resultType="com.sp.app.model.Workshop">
		SELECT programId, categoryId, programTitle, programContent, regDate, updDate
		FROM program
		WHERE programId = #{value}
	</select>

	<update id="updateProgram"
		parameterType="com.sp.app.model.Workshop">
		UPDATE program SET programTitle = #{programTitle}, programContent =
		#{programContent}, updDate = SYSDATE
		WHERE programId = #{programId}
	</update>

	<delete id="deleteProgram" parameterType="Long">
		DELETE FROM program
		WHERE programId = #{value}
	</delete>
	
	<!-- 담당자 -->
	<insert id="insertManager" parameterType="com.sp.app.model.Workshop">
	INSERT INTO workshopManager (managerId, name, tel, email, department)
	VALUES (manager_seq.NEXTVAL, #{name}, #{tel}, #{email}, #{department})
	</insert>
	
	<select id="listManager" parameterType="map" resultType="com.sp.app.model.Workshop">
	SELECT managerId, name, tel, email, department
	FROM workshopManager
	<where>
		<include refid="where-list-manager"/>
	</where>
	ORDER BY managerId DESC
	OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>
	
	<sql id="where-list-manager">
		<trim prefixOverrides="AND">
			<if test="kwd != null and kwd != ''">
				AND (LOWER(name) LIKE '%' || LOWER(#{kwd}) || '%'
				OR LOWER(department) LIKE '%' || LOWER(#{kwd}) || '%')
			</if>
			<if test="managerId != null">
				AND managerId = #{managerId}
			</if>
		</trim>
	</sql>
	
	<select id="managerDataCount">
	SELECT NVL(COUNT(*), 0)
	FROM workshopManager
		<where>
			<include refid="where-list-manager"/>
		</where>
	</select>
	
	<select id="findManagerById" parameterType="Long" resultType="com.sp.app.model.Workshop">
	SELECT managerId, name, tel, email, department
	FROM workshopManager
	WHERE managerId = #{value}
	</select>
	
	<update id="updateManager" parameterType="com.sp.app.model.Workshop">
	UPDATE WorkshopManager
	SET name = #{name}, tel = #{tel}, email = #{email}, department = #{department}
	WHERE managerId = #{managerId}
	</update>
	
	<delete id="deleteManager" parameterType="Long">
	DELETE FROM workshopManager
	WHERE managerId = #{value}
	</delete>
	
	<!-- 워크샵 -->
	<insert id="insertWorkshop" parameterType="com.sp.app.model.Workshop">
	INSERT INTO workshop (workshopId, programId, managerId, workshopTitle, scheduleDate, applyDeadline, location,
		workshopStatus, capacity, thumbnailPath, workshopContent, regDate, updDate) 
	VALUES (workshop_seq.NEXTVAL, #{programId}, #{managerId}, #{workshopTitle}, #{scheduleDate}, #{applyDeadline}, #{location},
	#{workshopStatus}, #{capacity}, #{thumbnailPath}, #{workshopContent}, SYSDATE, SYSDATE)
	</insert>
	
	<select id="listWorkshop" parameterType="map" resultType="com.sp.app.model.Workshop">
	SELECT workshopId, programId, managerId, workshopTitle, scheduleDate, applyDeadline, location,
		workshopStatus, capacity, thumbnailPath, workshopContent, regDate, updDate
	FROM workshop
	<where>
		<include refid="where-list-workshop"/>
	</where>
	ORDER BY regDate DESC
	OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>
	
	<sql id="where-list-workshop">
		<trim prefixOverrides="AND">
		<if test="kwd != null and kwd != ''">
            AND (LOWER(workshopTitle) LIKE '%' || LOWER(#{kwd}) || '%'
                 OR LOWER(workshopContent) LIKE '%' || LOWER(#{kwd}) || '%')
        </if>
		<if test="workshopId != null">
		AND workshopId = #{workshopId}
		</if>
		</trim>
	</sql>
	
	<select id="workshopDataCount">
	SELECT NVL(COUNT(*), 0)
	FROM workshop
		<where>
			<include refid="where-list-workshop"/>
		</where>
	</select>
	
	<select id="findWorkshopById" parameterType="Long" resultType="com.sp.app.model.Workshop">
	SELECT workshopId, programId, managerId, workshopTitle, scheduleDate, applyDeadline, location,
		workshopStatus, capacity, thumbnailPath, workshopContent, regDate, updDate
	FROM workshop
	WHERE workshopId = #{value}
	</select>
	
	<update id="updateWorkshop" parameterType="com.sp.app.model.Workshop">
	UPDATE workshop
	SET workshopTitle = #{workshopTitle}, scheduleDate = #{scheduleDate}, applyDeadline = #{applyDeadline}, location = #{location}, workshopStatus = #{workshopStatus},
			 capacity = #{capacity}, thumbnailPath = #{thumbnailPath}, workshopContent = #{workshopContent}, updDate = SYSDATE
	WHERE workshopId = #{workshopId}
	</update>
	
	<delete id="deleteWorkshop" parameterType="Long">
	DELETE FROM workshop
	WHERE workshopId = #{value}
	</delete>
	
	<!-- 워크샵 사진 -->
	<insert id="insertWorkshopPhoto" parameterType="com.sp.app.model.Workshop">
	INSERT INTO workshopPhoto (photoId, workshopId, workshopImagePath)
	VALUES (workshopPhoto_seq.NEXTVAL, #{workshopId}, #{workshopImagePath})
	</insert>
	
	<select id="workshopPhotoDataCount" parameterType="map" resultType="Integer">
	SELECT NVL(COUNT(*), 0)
	FROM workshopPhoto
	</select>
	
	<!-- 특정 워크샵 사진 목록 -->
	<select id="listWorkshopPhoto" parameterType="map" resultType="com.sp.app.model.Workshop">
	SELECT photoId, workshopId, workshopImagePath
	FROM workshopPhoto
	WHERE workshopId = #{workshopId}
	</select>
	
	<!-- 사진 단건 조회 -->
	<select id="findWorkshopPhotoById" parameterType="Long" resultType="com.sp.app.model.Workshop">
	SELECT photoId, workshopId, workshopImagePath
	FROM workshopPhoto
	WHERE photoId = #{value}
	</select>
	
	<!-- 사진 단건 삭제 -->
	<delete id="deleteWorkshopPhotoById" parameterType="Long">
	DELETE FROM workshopPhoto
	WHERE photoId = #{value}
	</delete>
	
	<!-- 워크샵 삭제 시 모든 사진 삭제 -->
	<delete id="deleteWorkshopPhotosByWorkshopId" parameterType="Long">
	DELETE FROM workshopPhoto
	WHERE workshopId = #{value}
	</delete>

</mapper>