<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.admin.mapper.ChallengeManageMapper">

  <!-- 시퀀스 -->
  <select id="nextChallengeId" resultType="long">
    SELECT challenge_seq.NEXTVAL FROM dual
  </select>

  <!-- 공통 컬럼 -->
  <sql id="baseColumns">
    c.challengeId, c.title, c.description, c.thumbnail,
    c.rewardPoints, TO_CHAR(c.regDate,'YYYY-MM-DD HH24:MI:SS') AS challengeRegDate,
    c.challengeType
  </sql>

  <!-- 등록 -->
  <insert id="insertChallenge" parameterType="com.sp.app.model.Challenge">
    INSERT INTO challenge (
      challengeId, title, description, thumbnail, rewardPoints, regDate, challengeType
    ) VALUES (
      #{challengeId},
      #{title},
      #{description},
      <!-- NULL 허용: 파일명만 저장, 없으면 NULL -->
      #{thumbnail, jdbcType=VARCHAR},
      NVL(#{rewardPoints},0),
      SYSDATE,
      #{challengeType}
    )
  </insert>

  <insert id="insertDailyChallenge" parameterType="com.sp.app.model.Challenge">
    INSERT INTO dailyChallenge (challengeId, weekday)
    VALUES (#{challengeId}, NVL(#{weekday}, 0))
  </insert>

  <insert id="insertSpecialChallenge" parameterType="com.sp.app.model.Challenge">
    INSERT INTO specialChallenge (
      challengeId, startDate, endDate, requireDays, status
    ) VALUES (
      #{challengeId},
      TO_DATE(#{startDate}, 'YYYY-MM-DD'),
      TO_DATE(#{endDate},   'YYYY-MM-DD'),
      NVL(#{requireDays}, 3),
      NVL(#{specialStatus}, 0)
    )
  </insert>

  <!-- 단건 조회 -->
  <select id="findById" parameterType="long" resultType="com.sp.app.model.Challenge">
    SELECT <include refid="baseColumns"/>
    FROM challenge c
    WHERE c.challengeId = #{challengeId}
  </select>

  <select id="findDailyById" parameterType="long" resultType="com.sp.app.model.Challenge">
    SELECT challengeId, weekday
    FROM dailyChallenge
    WHERE challengeId = #{challengeId}
  </select>

  <select id="findSpecialById" parameterType="long" resultType="com.sp.app.model.Challenge">
    SELECT
      challengeId,
      TO_CHAR(startDate,'YYYY-MM-DD') AS startDate,
      TO_CHAR(endDate,'YYYY-MM-DD')   AS endDate,
      requireDays,
      status AS specialStatus
    FROM specialChallenge
    WHERE challengeId = #{challengeId}
  </select>

  <!-- 목록/검색 -->
  <sql id="whereList">
    <if test="kwd != null and kwd != ''">
      ( INSTR(c.title, #{kwd}) &gt; 0 OR INSTR(c.description, #{kwd}) &gt; 0 )
    </if>
    <if test="challengeType != null and challengeType != ''">
      AND c.challengeType = #{challengeType}
    </if>
    <if test="weekday != null">
      AND EXISTS (
        SELECT 1 FROM dailyChallenge d
        WHERE d.challengeId = c.challengeId AND d.weekday = #{weekday}
      )
    </if>
  </sql>

  <select id="dataCount" parameterType="map" resultType="int">
    SELECT NVL(COUNT(*),0)
    FROM challenge c
    <where>
      <include refid="whereList"/>
    </where>
  </select>

  <select id="listChallenge" parameterType="map" resultType="com.sp.app.model.Challenge">
    SELECT
      <include refid="baseColumns"/>,
      d.weekday,
      TO_CHAR(s.startDate,'YYYY-MM-DD') AS startDate,
      TO_CHAR(s.endDate,'YYYY-MM-DD')   AS endDate,
      s.requireDays,
      s.status AS specialStatus
    FROM challenge c
    LEFT JOIN dailyChallenge   d ON d.challengeId = c.challengeId
    LEFT JOIN specialChallenge s ON s.challengeId = c.challengeId
    <where>
      <include refid="whereList"/>
    </where>
    ORDER BY c.challengeId DESC
    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
  </select>

  <!-- 수정 -->
  <update id="updateChallenge" parameterType="com.sp.app.model.Challenge">
    UPDATE challenge
    <set>
      <if test="title != null">       title = #{title},</if>
      <if test="description != null"> description = #{description},</if>

     
      <if test="thumbnail != null">
        thumbnail = #{thumbnail},
      </if>
      <if test="thumbnail == null and removeThumbnail != null and removeThumbnail == true">
        thumbnail = NULL,
      </if>

      <if test="rewardPoints != null">  rewardPoints = #{rewardPoints},</if>
      <if test="challengeType != null"> challengeType = #{challengeType},</if>
    </set>
    WHERE challengeId = #{challengeId}
  </update>

  <update id="updateDailyChallenge" parameterType="com.sp.app.model.Challenge">
    UPDATE dailyChallenge
    SET weekday = NVL(#{weekday}, 0)
    WHERE challengeId = #{challengeId}
  </update>

  <update id="updateSpecialChallenge" parameterType="com.sp.app.model.Challenge">
    UPDATE specialChallenge
    SET startDate   = TO_DATE(#{startDate}, 'YYYY-MM-DD'),
        endDate     = TO_DATE(#{endDate},   'YYYY-MM-DD'),
        requireDays = NVL(#{requireDays}, 3),
        status      = NVL(#{specialStatus}, 0)
    WHERE challengeId = #{challengeId}
  </update>

  <!-- 삭제 -->
  <delete id="deleteChallenge" parameterType="long">
    DELETE FROM challenge WHERE challengeId = #{challengeId}
  </delete>

  <delete id="deleteDaily" parameterType="long">
    DELETE FROM dailyChallenge WHERE challengeId = #{challengeId}
  </delete>

  <delete id="deleteSpecial" parameterType="long">
    DELETE FROM specialChallenge WHERE challengeId = #{challengeId}
  </delete>
  
  
  <!-- 관리자 인증 개수 -->
<select id="countAdminCerts" parameterType="map" resultType="int">
  SELECT NVL(COUNT(*), 0)
  FROM certificationPost p
  JOIN challengeParticipation cp ON cp.participationId = p.participationId
  JOIN challenge c               ON c.challengeId       = cp.challengeId
  LEFT JOIN specialChallenge s   ON s.challengeId       = c.challengeId
  <where>
    <!-- 타입 필터 -->
    <if test="type != null and type == 'DAILY'">
      p.dayNumber IS NULL
    </if>
    <if test="type != null and type == 'SPECIAL'">
      p.dayNumber IS NOT NULL
    </if>
    <if test="type == null or type == 'ALL'">
      1=1
    </if>

    <!-- 승인 상태 -->
    <if test="approvalStatus != null">
      AND p.approvalStatus = #{approvalStatus}
    </if>

	<!-- UI에서 요청할 때만 '마지막 일차' 제한 적용 -->
	<if test="type == 'SPECIAL' and lastDayOnly == true">
	  AND p.dayNumber = NVL(s.requireDays, 3)
	</if>

    <!-- 키워드 -->
    <if test="keyword != null and keyword != ''">
      AND (
           INSTR(c.title, #{keyword}) &gt; 0
        OR TO_CHAR(cp.memberId) = #{keyword}
        OR EXISTS (
            SELECT 1
            FROM member1 mm1 JOIN member2 mm2 ON mm2.memberId = mm1.memberId
            WHERE mm1.memberId = cp.memberId
              AND INSTR(mm2.name, #{keyword}) &gt; 0
        )
      )
    </if>
  </where>
</select>


<!-- 관리자 인증 목록 -->
<select id="listAdminCerts" parameterType="map" resultType="com.sp.app.model.Challenge">
  SELECT
    p.postId, p.participationId, p.dayNumber, p.approvalStatus,
    TO_CHAR(p.regDate,'YYYY-MM-DD HH24:MI:SS') AS postRegDate,
    p.content,

    cp.memberId,
    cp.status AS participationStatus,
    TO_CHAR(cp.participateDate,'YYYY-MM-DD HH24:MI:SS') AS participateDate,

    c.challengeId, c.title, c.challengeType, c.rewardPoints,
    TO_CHAR(s.startDate,'YYYY-MM-DD') AS startDate,
    TO_CHAR(s.endDate,  'YYYY-MM-DD') AS endDate,
    s.requireDays  AS requireDays,  

    (SELECT MIN(photoUrl) FROM certificationPhoto WHERE postId = p.postId) AS photoUrl,
    m2.name AS memberName

  FROM certificationPost p
  JOIN challengeParticipation cp ON cp.participationId = p.participationId
  JOIN challenge c               ON c.challengeId       = cp.challengeId
  JOIN member1 m1                ON m1.memberId         = cp.memberId
  JOIN member2 m2                ON m2.memberId         = m1.memberId
  LEFT JOIN specialChallenge s   ON s.challengeId       = c.challengeId
  <where>
    <!-- 타입 필터 -->
    <if test="type != null and type == 'DAILY'">
      p.dayNumber IS NULL
    </if>
    <if test="type != null and type == 'SPECIAL'">
      p.dayNumber IS NOT NULL
    </if>
    <if test="type == null or type == 'ALL'">
      1=1
    </if>

    <!-- 승인 상태 -->
    <if test="approvalStatus != null">
      AND p.approvalStatus = #{approvalStatus}
    </if>

	<!-- UI에서 요청할 때만 '마지막 일차' 제한 적용 -->
	<if test="type == 'SPECIAL' and lastDayOnly == true">
	  AND p.dayNumber = NVL(s.requireDays, 3)
	</if>


    <!-- 검색어 -->
    <if test="keyword != null and keyword != ''">
      AND ( INSTR(c.title, #{keyword}) &gt; 0
            OR TO_CHAR(cp.memberId) = #{keyword} )
    </if>
  </where>
  ORDER BY p.postId DESC
  OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>



	<!-- 단건 상세 -->
	<select id="findCertDetail" parameterType="long" resultType="com.sp.app.model.Challenge">
	  SELECT
	    
	    p.postId,
	    p.participationId,
	    p.dayNumber,
	    p.approvalStatus,
	    TO_CHAR(p.regDate, 'YYYY-MM-DD HH24:MI:SS') AS postRegDate,
	    p.content,
	    p.isPublic,
	
	    
	    cp.memberId,
	    m2.name AS memberName,
	    cp.status AS participationStatus,
	    TO_CHAR(cp.participateDate, 'YYYY-MM-DD HH24:MI:SS') AS participateDate,
	
	    
	    c.challengeId,
	    c.title,
	    c.description,
	    c.challengeType,
	    c.rewardPoints,
	
	    
	    TO_CHAR(s.startDate, 'YYYY-MM-DD') AS startDate,
	    TO_CHAR(s.endDate,   'YYYY-MM-DD') AS endDate,
	    s.requireDays,
	    s.status AS specialStatus
	
	  FROM certificationPost p
	  JOIN challengeParticipation cp ON cp.participationId = p.participationId
	  JOIN challenge c               ON c.challengeId       = cp.challengeId
	  JOIN member1 m1                ON m1.memberId         = cp.memberId
	  JOIN member2 m2                ON m2.memberId         = m1.memberId
	  LEFT JOIN specialChallenge s   ON s.challengeId       = c.challengeId
	  WHERE p.postId = #{postId}
	
	</select>

	<!-- 사진 -->
	<select id="listCertPhotos" parameterType="long" resultType="string">
	  SELECT photoUrl
	  FROM certificationPhoto
	  WHERE postId = #{postId}
	  ORDER BY photoId
	</select>
	
	<!-- 승인상태 변경 -->
	<update id="updateCertApproval" parameterType="map">
	  UPDATE certificationPost
	  SET approvalStatus = #{approvalStatus}
	  WHERE postId = #{postId}
	</update>
	
	<!-- 보상/완료 처리용 정보 -->
	<select id="selectRewardInfoByPostId" parameterType="long" resultType="com.sp.app.model.Challenge">
	  SELECT
	    p.postId,
	    p.participationId,
	    p.dayNumber,
	    cp.memberId,
	    c.challengeId,
	    c.rewardPoints,
	    c.title,
	    c.challengeType
	  FROM certificationPost p
	  JOIN challengeParticipation cp ON cp.participationId = p.participationId
	  JOIN challenge c               ON c.challengeId       = cp.challengeId
	  WHERE p.postId = #{postId}
	</select>
	
	<!-- 스페셜 승인된 일차 수 -->
	<select id="countApprovedDays" parameterType="long" resultType="int">
	  SELECT NVL(COUNT(*), 0)
	  FROM certificationPost
	  WHERE participationId = #{participationId}
	    AND approvalStatus = 1
	    AND dayNumber IS NOT NULL
	</select>
	
	<!-- 참여 상태 변경 -->
	<update id="updateParticipationStatus" parameterType="map">
	  UPDATE challengeParticipation
	  SET status = #{status}
	  WHERE participationId = #{participationId}
	</update>
	
	
	<!-- 스페셜 requireDays 조회 -->
	<select id="selectRequireDaysByChallengeId" parameterType="long" resultType="int">
	  SELECT NVL(s.requireDays, 3)
	  FROM specialChallenge s
	  WHERE s.challengeId = #{challengeId}
	</select>
	
	<!--  포인트 중복 적립 여부 -->
	<select id="existsPointByPostId" parameterType="long" resultType="boolean">
	  SELECT CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END
	  FROM point
	  WHERE postId = #{postId}
	    AND classify = 1
	</select>
	
	<!-- 1~3일차의 인증 날짜 -->
  <select id="selectSpecialDayDates" parameterType="long" resultType="map">
    SELECT dayNumber,
           TO_CHAR(TRUNC(regDate), 'YYYY-MM-DD') AS dayDate
      FROM certificationPost
     WHERE participationId = #{participationId}
       AND dayNumber IN (1,2,3)
  </select>
	
	
	  

</mapper>
