<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.MyShoppingMapper">
	<!-- 장바구니 등록 -->
	<insert id="insertCart" parameterType="com.sp.app.model.ProductOrder">
		INSERT INTO cart(cartId, memberId, productCode, stockNum, qty, reg_date)
		VALUES (cart_seq.NEXTVAL, #{memberId}, #{productCode}, #{stockNum}, #{qty}, SYSDATE)
	</insert>
	
	<!-- 장바구니 수정 -->
	<update id="updateCart" parameterType="com.sp.app.model.ProductOrder">
		UPDATE cart SET qty = #{qty}, reg_date = SYSDATE
		WHERE stockNum = #{stockNum} AND memberId = #{memberId}
	</update>

	<!-- 장바구니 찾기 -->
	<select id="findByCartId" parameterType="map" resultType="com.sp.app.model.ProductOrder">
		SELECT cartId, memberId, productCode, stockNum, qty, reg_date
		FROM cart
		WHERE stockNum = #{stockNum} AND memberId = #{memberId}
	</select>
	
	<!-- 유저의 장바구니 리스트 -->
		<select id="listCart" resultType="com.sp.app.model.ProductOrder" parameterType="Long">
    	SELECT ct.cartId, ct.memberId, ct.stockNum, ct.qty, ct.reg_date,
    		ps.productCode, ps.optionDetailNum, ps.optionDetailNum2, ps.totalStock,
    		p.productName, p.price, p.point, p.thumbnail, p.optionCount,
    		po1.optionNum, po1.optionName,
    		po2.optionNum optionNum2, po2.optionName optionName2,
    		d1.optionDetailNum, d1.optionValue,
    		d2.optionDetailNum optionDetailNum2, d2.optionValue optionValue2
    	FROM cart ct
    	JOIN productStock ps ON ct.stockNum = ps.stockNum 
    	JOIN product p ON ps.productCode = p.productCode
    	LEFT OUTER JOIN (
            SELECT productCode, optionNum, optionName, parentOption 
            FROM productOption 
            WHERE parentOption IS NULL
    	) po1 ON ps.productCode = po1.productCode
		LEFT OUTER JOIN (
            SELECT optionNum, optionName, parentOption
            FROM productOption
			WHERE parentOption IS NOT NULL
        ) po2 ON po1.optionNum = po2.parentOption
    	LEFT OUTER JOIN optionDetail d1 ON ps.optionDetailNum = d1.optionDetailNum
    	LEFT OUTER JOIN optionDetail d2 ON ps.optionDetailNum2 = d2.optionDetailNum
		WHERE ct.memberId = #{memberId}
		ORDER BY cartId DESC
	</select>
	
	<!-- 장바구니 삭제 -->
	<delete id="deleteCart" parameterType="map">
		DELETE FROM cart
		WHERE memberId = #{memberId} 
		<if test="gubun == 'item' ">
			AND stockNum = #{stockNum}
		</if>
		<if test="gubun == 'list' ">
			AND stockNum IN
			<foreach collection="list" item="stockNum" index="index"
				open="(" separator="," close=")">
				#{stockNum}
			</foreach>
		</if>
	</delete>
		
	<!-- 장바구니 등록 후 15일이 지난 내역 삭제 -->
	<delete id="deleteCartExpiration">
		DELETE FROM cart
		WHERE reg_date + 15 &lt; SYSDATE
	</delete>

	<!-- 데스터네이션(배송지) 등록 -->
	<insert id="insertDestination" parameterType="com.sp.app.model.Destination">
		INSERT INTO myDestination(myDestinationId, memberId, addressName, recipientName, defaultDest, 
			tel, zip, addr1, addr2, pickup, accessInfo, passcode, accessSave)
		VALUES (myDestinationId_seq.NEXTVAL, #{memberId}, #{addressName, jdbcType=VARCHAR}, 
			#{recipientName}, #{defaultDest},
			#{tel}, #{zip}, #{addr1}, #{addr2}, 
			#{pickup, jdbcType=VARCHAR}, #{accessInfo, jdbcType=VARCHAR}, 
			#{passcode, jdbcType=VARCHAR}, #{accessSave})
	</insert>
	
	<select id="destinationCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM myDestination
		WHERE member_id = #{member_id}
	</select>
	
	<select id="listDestination" resultType="com.sp.app.model.Destination" parameterType="Long">
    	SELECT myDestinationId, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, 
			pickup, accessInfo, passcode, accessSave
    	FROM myDestination
		WHERE memberId = #{memberId}
		ORDER BY defaultDest DESC, myDestinationId DESC
	</select>

	<!-- 기본 배송지 -->
	<select id="defaultDelivery" resultType="com.sp.app.model.Destination" parameterType="Long">
		SELECT myDestinationId, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, pickup, 
			accessInfo, passcode, accessSave
		FROM (
			SELECT myDestinationId, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, pickup, 
				accessInfo, passcode, accessSave
			FROM myDestination
			WHERE memberId = #{memberId} AND defaultDest = 1
				UNION ALL
			SELECT myDestinationId, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, pickup, 
				accessInfo, passcode, accessSave
			FROM myDestination
			WHERE memberId = #{memberId} AND 
				NOT EXISTS (SELECT 1 FROM myDestination WHERE memberId = #{memberId} AND defaultDest = 1)
			ORDER BY defaultDest DESC, myDestinationId DESC
		)
		WHERE ROWNUM = 1
	</select>

	<update id="updateDestination" parameterType="com.sp.app.model.Destination">
		UPDATE myDestination SET addressName = #{addressName, jdbcType=VARCHAR},  
			recipientName = #{recipientName}, defaultDest = #{defaultDest},
			tel = #{tel}, zip = #{zip}, addr1 = #{addr1}, addr2 = #{addr2},
			pickup = #{pickup, jdbcType=VARCHAR}, accessInfo = #{accessInfo, jdbcType=VARCHAR}, 
			passcode = #{passcode, jdbcType=VARCHAR} 
		WHERE myDestinationId = #{myDestinationId} AND memberId = #{memberId}
	</update>
	
	<update id="updateDefaultDestination" parameterType="map">
		UPDATE myDestination SET defaultDest = #{defaultDest}
		WHERE memberId = #{memberId}
		<if test="myDestinationId != null">
			AND myDestinationId = #{myDestinationId}
		</if>
	</update>

	<delete id="deleteDestination" parameterType="map">
		DELETE FROM myDestination
		WHERE memberId = #{memberId} AND myDestinationId = #{myDestinationId}
	</delete>

	<!-- 10개를 초과하는 경우 오래된 배송지 삭제 -->	
    <delete id="deleteOldestDestination" parameterType="Long">
        DELETE FROM myDestination
        WHERE myDestinationId IN (
            SELECT myDestinationId
            FROM (
                SELECT myDestinationId, ROW_NUMBER() OVER (ORDER BY defaultDest DESC, myDestinationId DESC) as rn
                FROM myDestination
                WHERE memberId = #{memberId}
            )
            WHERE rn &gt; 10
        )
    </delete>
    
    <!-- 찜 등록 -->
    <insert id="insertProductLike" parameterType="map">
    	INSERT INTO productLike(productLikeNum, productCode, memberId, productLikeDate)
    	VALUES(productLike_seq.NEXTVAL, #{productCode}, #{memberId}, SYSDATE)
    </insert>
    
   	<!-- 30개를 초과하는 경우 오래된 찜 삭제 -->	
    <delete id="deleteOldestProductLikes" parameterType="Long">
        DELETE FROM productLike
        WHERE productLikeNum IN (
            SELECT productLikeNum
            FROM (
                SELECT productLikeNum, ROW_NUMBER() OVER (ORDER BY productLikeNum DESC) as rn
                FROM productLike
                WHERE memberId = #{memberId}
            )
            WHERE rn &gt; 30
        )
    </delete>
    
	<!-- 유저의 찜리스트 -->
	<select id="listProductLike" resultType="com.sp.app.model.ProductLike" parameterType="Long">
    	SELECT pl.productLikeNum, pl.memberId, pl.productCode, productLikeDate,
    		p.productName, p.price, p.point, p.thumbnail
    	FROM productLike pl
    	JOIN product p ON pl.productCode = p.productCode
		WHERE pl.memberId = #{memberId}
		ORDER BY productLikeNum DESC
    </select>

    <select id="findByProductLikeId" resultType="com.sp.app.model.ProductLike" parameterType="map">
        SELECT productLikeNum, memberId, productCode, productLikeDate
    	FROM productLike
		WHERE memberId = #{memberId} AND  productCode = #{productCode}
		ORDER BY productLikeNum DESC
    </select>
    
	<!-- 찜 삭제 -->
	<delete id="deleteProductLike" parameterType="map">
    	DELETE FROM productLike
		WHERE memberId = #{memberId} 
		<if test="productCode != null">
			AND productCode = #{productCode}		
		</if>
    </delete>
</mapper>
	