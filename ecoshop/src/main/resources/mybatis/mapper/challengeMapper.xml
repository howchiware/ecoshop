<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.ChallengeMapper">

  <!-- 공통 컬럼 -->
  <sql id="baseColumns">
    c.challengeId, c.title, c.description, c.thumbnail,
    c.rewardPoints, TO_CHAR(c.regDate,'YYYY-MM-DD HH24:MI:SS') AS challengeRegDate,
    c.challengeType
  </sql>

  <!-- 데일리 - 요일 챌린지 7개 -->
  <select id="listDailyAll" resultType="com.sp.app.model.Challenge">
    SELECT <include refid="baseColumns"/>, d.weekday
    FROM challenge c
    JOIN dailyChallenge d ON d.challengeId = c.challengeId
    WHERE c.challengeType = 'DAILY'
    ORDER BY d.weekday
  </select>

  <!-- 오늘 요일 챌린지 1개 -->
  <select id="getTodayDaily" parameterType="int" resultType="com.sp.app.model.Challenge">
    SELECT <include refid="baseColumns"/>, d.weekday
    FROM challenge c
    JOIN dailyChallenge d ON d.challengeId = c.challengeId
    WHERE c.challengeType = 'DAILY'
      AND d.weekday = #{todayDow}
    FETCH FIRST 1 ROWS ONLY
  </select>

  <!-- 스페셜 목록(더보기/키셋) -->
  <select id="listSpecialMore" parameterType="map" resultType="com.sp.app.model.Challenge">
  SELECT
    c.challengeId                                AS challengeId,
    c.title                                      AS title,
    c.description                                AS description,
    c.thumbnail                                  AS thumbnail,
    c.rewardPoints                               AS rewardPoints,
    TO_CHAR(c.regDate, 'YYYY-MM-DD HH24:MI:SS')  AS challengeRegDate,
    c.challengeType                              AS challengeType,
    TO_CHAR(s.startDate, 'YYYY-MM-DD')           AS startDate,
    TO_CHAR(s.endDate,   'YYYY-MM-DD')           AS endDate,
    s.requireDays                                AS requireDays,
    s.status                                     AS specialStatus
  FROM challenge c
  JOIN specialChallenge s
    ON s.challengeId = c.challengeId
  WHERE c.challengeType = 'SPECIAL'
    AND s.status IN (0, 1)
    AND (SYSDATE BETWEEN s.startDate AND s.endDate OR SYSDATE &lt; s.startDate)

  <choose>
    <!-- 종료일 빠른 순 -->
    <when test="sort == 'CLOSE_DATE'">
      <if test="lastEndDate != null and lastEndDate != ''">
        AND (
          s.endDate &gt; TO_DATE(#{lastEndDate}, 'YYYY-MM-DD')
          OR (s.endDate = TO_DATE(#{lastEndDate}, 'YYYY-MM-DD') AND c.challengeId &gt; #{lastId})
        )
      </if>
      ORDER BY s.endDate ASC NULLS LAST, c.challengeId ASC
    </when>

    <!-- 인기순(예: 포인트 DESC) -->
    <when test="sort == 'POPULAR'">
      <if test="lastId != null">
        AND c.challengeId &lt; #{lastId}
      </if>
      ORDER BY c.rewardPoints DESC, c.challengeId DESC
    </when>

    <!-- 기본: 최신순 -->
    <otherwise>
      <if test="lastId != null">
        AND c.challengeId &lt; #{lastId}
      </if>
      ORDER BY c.challengeId DESC
    </otherwise>
  </choose>

  FETCH FIRST #{size} ROWS ONLY
</select>

  <!-- 상세 보기 -->
  <select id="findDailyDetail" parameterType="long" resultType="com.sp.app.model.Challenge">
    SELECT <include refid="baseColumns"/>, d.weekday
    FROM challenge c
    JOIN dailyChallenge d ON d.challengeId = c.challengeId
    WHERE c.challengeId = #{challengeId}
  </select>

  <select id="findSpecialDetail" parameterType="long" resultType="com.sp.app.model.Challenge">
    SELECT
      <include refid="baseColumns"/>,
      TO_CHAR(s.startDate,'YYYY-MM-DD') AS startDate,
      TO_CHAR(s.endDate,'YYYY-MM-DD')   AS endDate,
      s.requireDays,
      s.status AS specialStatus
    FROM challenge c
    JOIN specialChallenge s ON s.challengeId = c.challengeId
    WHERE c.challengeId = #{challengeId}
  </select>

  <!-- 해당 요일 1건 조회 -->
  <select id="selectDailyByWeekday" parameterType="int" resultType="com.sp.app.model.Challenge">
    SELECT <include refid="baseColumns"/>, d.weekday
    FROM dailyChallenge d
    JOIN challenge c ON c.challengeId = d.challengeId
    WHERE c.challengeType = 'DAILY'
      AND d.weekday = #{weekday}
    FETCH FIRST 1 ROWS ONLY
  </select>

  <!-- 오늘 참여 여부(요일: 당일 1회 제한) -->
  <select id="countTodayDailyJoin" parameterType="map" resultType="int">
    SELECT NVL(COUNT(*),0)
    FROM challengeParticipation p
    WHERE p.memberId = #{memberId}
      AND p.challengeId = #{challengeId}
      AND TRUNC(p.participateDate) = TRUNC(SYSDATE)
  </select>

  <!-- 시퀀스 -->
  <select id="nextParticipationId" resultType="long">
    SELECT participation_seq.NEXTVAL FROM dual
  </select>

  <select id="nextPostId" resultType="long">
    SELECT cert_post_seq.NEXTVAL FROM dual
  </select>

  <select id="nextPhotoId" resultType="long">
    SELECT cert_photo_seq.NEXTVAL FROM dual
  </select>

  <!-- 참여 등록 -->
  <insert id="insertParticipation" parameterType="com.sp.app.model.Challenge">
    INSERT INTO challengeParticipation (
      participationId, challengeId, memberId, participateDate, status, cancelAt
    ) VALUES (
      #{participationId}, #{challengeId}, #{memberId}, SYSDATE,
      <choose>
        <when test="participationStatus != null">#{participationStatus}</when>
        <otherwise>0</otherwise>
      </choose>,
      <choose>
        <when test="cancelAt != null and cancelAt != ''">
          TO_DATE(#{cancelAt}, 'YYYY-MM-DD')
        </when>
        <otherwise>NULL</otherwise>
      </choose>
    )
  </insert>

  <!-- 참여 상태/취소일 갱신 : 넘겨준 필드만 SET -->
  <update id="updateParticipation" parameterType="com.sp.app.model.Challenge">
    UPDATE challengeParticipation
    <set>
      <if test="participationStatus != null">
        status = #{participationStatus},
      </if>
      <if test="cancelAt != null and cancelAt != ''">
        cancelAt = TO_DATE(#{cancelAt}, 'YYYY-MM-DD'),
      </if>
    </set>
    WHERE participationId = #{participationId}
  </update>

  <!-- 인증 게시글 INSERT
       - SPECIAL: dayNumber = 1~3
       - DAILY  : dayNumber = NULL -->
  <insert id="insertCertificationPost" parameterType="com.sp.app.model.Challenge">
    INSERT INTO certificationPost (
      postId, participationId, dayNumber, content, regDate, approvalStatus, isPublic
    ) VALUES (
      #{postId},
      #{participationId},
      <choose>
        <when test="challengeType == 'SPECIAL'">
          #{dayNumber}
        </when>
        <otherwise>
          NULL
        </otherwise>
      </choose>,
      #{content},
      SYSDATE,
      #{approvalStatus},
      #{isPublic}
    )
  </insert>

  <!-- 인증 사진 INSERT (사진 있을 때만 호출) -->
  <insert id="insertCertificationPhoto" parameterType="com.sp.app.model.Challenge">
    INSERT INTO certificationPhoto (photoId, postId, photoUrl, regDate)
    VALUES (#{photoId}, #{postId}, #{photoUrl}, SYSDATE)
  </insert>

  <!-- 스페셜 진행률 (1~3일) -->
  <select id="selectSpecialProgress" parameterType="long" resultType="map">
    SELECT
      c.dayNumber AS dayNumber,
      NVL(COUNT(p.postId),0) AS done
    FROM (SELECT 1 AS dayNumber FROM dual
          UNION ALL SELECT 2 FROM dual
          UNION ALL SELECT 3 FROM dual) c
    LEFT JOIN certificationPost p
      ON p.participationId = #{participationId}
     AND p.dayNumber = c.dayNumber
    GROUP BY c.dayNumber
    ORDER BY c.dayNumber
  </select>

  <!-- 스페셜 제출용 추가 쿼리 -->

  <!-- 진행/대기 중인 참여 1건 -->
  <!-- 스페셜인증 중 최종제출 이후 추가 업로드 차단 -->
  <select id="selectActiveParticipation" parameterType="map" resultType="com.sp.app.model.Challenge">
	  SELECT participationId, challengeId, memberId,
	         TO_CHAR(participateDate,'YYYY-MM-DD HH24:MI:SS') AS participateDate,
	         status AS participationStatus
	  FROM challengeParticipation
	  WHERE memberId = #{memberId}
	    AND challengeId = #{challengeId}
	    AND status IN (0)   <!-- 여기 0만 허용 -->
	  ORDER BY participateDate DESC
	  FETCH FIRST 1 ROWS ONLY
  </select>

  <!-- 일차 중복 여부 -->
  <select id="existsPostByParticipationAndDay" parameterType="map" resultType="int">
    SELECT NVL(COUNT(*),0)
    FROM certificationPost
    WHERE participationId = #{participationId}
      AND dayNumber = #{dayNumber}
  </select>

  <!-- 최대 dayNumber -->
  <select id="selectMaxDayNumber" parameterType="long" resultType="int">
	  SELECT NVL(MAX(dayNumber), 0)
	  FROM certificationPost
	  WHERE participationId = #{participationId}
  </select>
  
  
  <!-- 스페셜 챌린지 인증용 제출 -->
  <select id="findParticipationById" parameterType="long" resultType="com.sp.app.model.Challenge">
	  SELECT participationId,
	         challengeId,
	         memberId,
	         TO_CHAR(participateDate,'YYYY-MM-DD HH24:MI:SS') AS participateDate,
	         status AS participationStatus
	  FROM challengeParticipation
	  WHERE participationId = #{participationId}
  </select>
  
  <!--  스페셜 챌린지 인증 조회용 -->
  <select id="countSpecialPosts" parameterType="long" resultType="int">
	  SELECT COUNT(*)
	  FROM certificationPost
	  WHERE participationId = #{participationId}
	    AND dayNumber IN (1,2,3)
  </select>
  
  <!-- 마이페이지 챌린지 확인용 -->
  <select id="listMyChallenges" parameterType="long" resultType="com.sp.app.model.Challenge">
  	SELECT
      cp.participationId,
      cp.memberId,
      cp.status AS participationStatus,
      TO_CHAR(cp.participateDate,'YYYY-MM-DD') AS participateDate,

      
      c.challengeId,
      c.title,
      c.challengeType,
      c.rewardPoints,

      
      TO_CHAR(s.startDate,'YYYY-MM-DD') AS startDate,
      TO_CHAR(s.endDate,  'YYYY-MM-DD') AS endDate,
      s.requireDays,

      
      (SELECT NVL(COUNT(*),0)
         FROM certificationPost p
        WHERE p.participationId = cp.participationId) AS certCount,

      (SELECT NVL(COUNT(*),0)
         FROM certificationPost p
        WHERE p.participationId = cp.participationId
          AND p.approvalStatus = 1
          AND p.dayNumber IS NOT NULL) AS approvedDays,

      (SELECT TO_CHAR(MAX(regDate),'YYYY-MM-DD HH24:MI:SS')
         FROM certificationPost p
        WHERE p.participationId = cp.participationId) AS postRegDate
        

    FROM challengeParticipation cp
    JOIN challenge c ON c.challengeId = cp.challengeId
    LEFT JOIN specialChallenge s ON s.challengeId = c.challengeId
    WHERE cp.memberId = #{memberId}
    ORDER BY cp.participateDate DESC
  </select>

  	<!-- 마이페이지: 총 건수 -->
	<select id="countMyChallenges" parameterType="long" resultType="int">
	  SELECT COUNT(*) 
	  FROM challengeParticipation cp
	  WHERE cp.memberId = #{memberId}
	</select>

	<!-- 마이페이지: 페이징 목록 -->
	<select id="listMyChallengesPaged" parameterType="map" resultType="com.sp.app.model.Challenge">
	  SELECT
	    cp.participationId,
	    cp.memberId,
	    cp.status AS participationStatus,
	    TO_CHAR(cp.participateDate,'YYYY-MM-DD') AS participateDate,
	
	    c.challengeId,
	    c.title,
	    c.challengeType,
	    c.rewardPoints,
	
	    TO_CHAR(s.startDate,'YYYY-MM-DD') AS startDate,
	    TO_CHAR(s.endDate,  'YYYY-MM-DD') AS endDate,
	    s.requireDays,
	
	    (SELECT NVL(COUNT(*),0)
	       FROM certificationPost p
	      WHERE p.participationId = cp.participationId) AS certCount,
	
	    (SELECT NVL(COUNT(*),0)
	       FROM certificationPost p
	      WHERE p.participationId = cp.participationId
	        AND p.approvalStatus = 1
	        AND p.dayNumber IS NOT NULL) AS approvedDays,
	
	    (SELECT TO_CHAR(MAX(regDate),'YYYY-MM-DD HH24:MI:SS')
	       FROM certificationPost p
	      WHERE p.participationId = cp.participationId) AS postRegDate
	
	  FROM challengeParticipation cp
	  JOIN challenge c ON c.challengeId = cp.challengeId
	  LEFT JOIN specialChallenge s ON s.challengeId = c.challengeId
	  WHERE cp.memberId = #{memberId}
	  ORDER BY cp.participateDate DESC
	  OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>
	
	<!-- 마이페이지 공개/비공개 전환(본인글만) -->
  	<update id="updatePostVisibility" parameterType="map">
	  UPDATE certificationPost p
	     SET isPublic = #{isPublic}
	   WHERE p.postId = #{postId}
	     AND EXISTS (
	           SELECT 1
	             FROM challengeParticipation cp
	            WHERE cp.participationId = p.participationId
	              AND cp.memberId = #{memberId}
	         )
	</update>
  
  	<!-- 공개된 스페셜 인증글(챌린지톡) 공개 글 개수 -->
  	<select id="countPublicSpecialPosts" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM certificationPost p
	    JOIN challengeParticipation cp ON cp.participationId = p.participationId
	    JOIN challenge c ON c.challengeId = cp.challengeId
	    JOIN member2 m ON m.memberId = cp.memberId       <!--★★ member1 → member2 -->
	   WHERE p.dayNumber IS NOT NULL
	     AND p.isPublic = 'Y'
	     AND p.approvalStatus = 1
	  <if test="kwd != null and kwd != ''">
	     AND (
	           c.title   LIKE '%'||#{kwd}||'%'
	        OR p.content LIKE '%'||#{kwd}||'%'
	        OR m.nickname LIKE '%'||#{kwd}||'%'          
	        OR m.name     LIKE '%'||#{kwd}||'%'         
	     )
  </if>
	</select>

	<!-- 챌린지톡: 공개 글 목록 -->
	<select id="listPublicSpecialPostsPaged" parameterType="map" resultType="com.sp.app.model.Challenge">
		SELECT
		     p.postId,
		     p.dayNumber,
		     TO_CHAR(p.regDate,'YYYY-MM-DD HH24:MI:SS') AS postRegDate,
		     p.isPublic,
		     p.approvalStatus,
		     cp.participationId,
		     cp.challengeId,
		     c.title,
		     NVL(m.nickname, m.name) AS memberName,          
		     (SELECT photoUrl FROM certificationPhoto ph
		       WHERE ph.postId = p.postId FETCH FIRST 1 ROWS ONLY) AS photoUrl
		  FROM certificationPost p
		  JOIN challengeParticipation cp ON cp.participationId = p.participationId
		  JOIN challenge c ON c.challengeId = cp.challengeId
		  JOIN member2 m ON m.memberId = cp.memberId          
		  WHERE p.dayNumber IS NOT NULL
		    AND p.isPublic = 'Y'
		    AND p.approvalStatus = 1
		  <if test="kwd != null and kwd != ''">
		     AND (
		           c.title   LIKE '%'||#{kwd}||'%'
		        OR p.content LIKE '%'||#{kwd}||'%'
		        OR m.nickname LIKE '%'||#{kwd}||'%'          
		        OR m.name     LIKE '%'||#{kwd}||'%'     
		     )
		  </if>
		  <choose>
		    <when test="sort == 'POPULAR'">
		      ORDER BY p.postId DESC
		    </when>
		    <otherwise>
		      ORDER BY p.regDate DESC
		    </otherwise>
		  </choose>
		  OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>
  	
  	<!--  내 인증글 관리: 총 개수  -->
	<select id="countMySpecialPosts" parameterType="map" resultType="int">
	  SELECT COUNT(*)
	    FROM certificationPost p
	    JOIN challengeParticipation cp ON cp.participationId = p.participationId
	   WHERE cp.memberId = #{memberId}
	     AND p.dayNumber IS NOT NULL              
	  <if test="challengeId != null">
	     AND cp.challengeId = #{challengeId}
	  </if>
	  <if test="kwd != null and kwd != ''">
	     AND p.content LIKE '%'||#{kwd}||'%'
	  </if>
	</select>

	<!--  내 인증글 관리: 페이징 목록  -->
	<select id="listMySpecialPostsPaged" parameterType="map" resultType="com.sp.app.model.Challenge">
	  SELECT
	     p.postId,
	     p.dayNumber,
	     p.isPublic,
	     p.approvalStatus,
	     TO_CHAR(p.regDate,'YYYY-MM-DD HH24:MI:SS') AS postRegDate,
	     cp.participationId,
	     cp.challengeId,
	     c.title,
	     (SELECT photoUrl FROM certificationPhoto ph
	       WHERE ph.postId = p.postId FETCH FIRST 1 ROWS ONLY) AS photoUrl
	  FROM certificationPost p
	  JOIN challengeParticipation cp ON cp.participationId = p.participationId
	  JOIN challenge c ON c.challengeId = cp.challengeId
	  WHERE cp.memberId = #{memberId}
	    AND p.dayNumber IS NOT NULL
	  <if test="challengeId != null">
	    AND cp.challengeId = #{challengeId}
	  </if>
	  <if test="kwd != null and kwd != ''">
	    AND p.content LIKE '%'||#{kwd}||'%'
	  </if>
	  ORDER BY p.regDate DESC
	  OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>
  	
  	
  	<!-- 인증글 상세: 공개/승인된 스페셜 인증글 1건 -->
	<select id="findPublicSpecialPost" parameterType="long" resultType="com.sp.app.model.Challenge">
	  SELECT
	    p.postId,
	    p.content,
	    TO_CHAR(p.regDate,'YYYY-MM-DD HH24:MI:SS') AS postRegDate,
	    p.dayNumber,
	    p.isPublic,
	    p.approvalStatus,
	    cp.participationId,
	    cp.challengeId,
	    c.title,
	    NVL(m.nickname, m.name) AS memberName
	  FROM certificationPost p
	  JOIN challengeParticipation cp ON cp.participationId = p.participationId
	  JOIN challenge c ON c.challengeId = cp.challengeId
	  JOIN member2 m ON m.memberId = cp.memberId
	  WHERE p.postId = #{postId}
	    AND p.dayNumber IS NOT NULL      -- 스페셜
	    AND p.isPublic = 'Y'             -- 공개
	    AND p.approvalStatus = 1         -- 승인됨
	</select>
	
	<!-- 인증글 사진 전체 -->
	<select id="listPostPhotos" parameterType="long" resultType="string">
	  SELECT photoUrl
	  FROM certificationPhoto
	  WHERE postId = #{postId}
	  ORDER BY photoId
	</select>
  
  	<!-- 번들 피드: 참여(1~3일 세트)=카드 1장 -->
<select id="listSpecialBundlesPaged" parameterType="map" resultType="com.sp.app.model.Challenge">
  WITH P_PUB AS (
    SELECT p.participationId, p.postId, p.dayNumber, p.regDate
    FROM certificationPost p
    WHERE p.dayNumber IS NOT NULL AND p.isPublic='Y' AND p.approvalStatus=1
  ),
  THUMB AS (
    SELECT participationId, MAX(regDate) AS lastPublicAt FROM P_PUB GROUP BY participationId
  ),
  THUMB_POST AS (
    SELECT t.participationId, pp.postId
    FROM THUMB t JOIN P_PUB pp ON pp.participationId=t.participationId AND pp.regDate=t.lastPublicAt
  ),
  AGG AS (
    SELECT cp.participationId, cp.memberId, cp.challengeId,
           COUNT(pp.postId) AS publicCount, MAX(pp.regDate) AS lastPublicAt
    FROM challengeParticipation cp JOIN P_PUB pp ON pp.participationId=cp.participationId
    GROUP BY cp.participationId, cp.memberId, cp.challengeId
  )
  SELECT agg.participationId, agg.memberId, agg.challengeId,
         agg.publicCount AS approvedDays,
         TO_CHAR(agg.lastPublicAt,'YYYY-MM-DD HH24:MI:SS') AS postRegDate,
         c.title, c.challengeType, NVL(m.nickname,m.name) AS memberName,
         (SELECT ph.photoUrl FROM certificationPhoto ph WHERE ph.postId=tp.postId FETCH FIRST 1 ROWS ONLY) AS photoUrl
  FROM AGG agg
  JOIN challenge c ON c.challengeId=agg.challengeId
  JOIN member2   m ON m.memberId=agg.memberId
  LEFT JOIN THUMB_POST tp ON tp.participationId=agg.participationId
  WHERE agg.publicCount >= 1
    AND (agg.publicCount=3 OR SYSDATE &lt;= (TRUNC(agg.lastPublicAt)+1+(10/24)))  
  <choose>
    <when test="sort == 'PROGRESS'">ORDER BY agg.publicCount DESC, agg.lastPublicAt DESC</when>
    <otherwise>ORDER BY agg.lastPublicAt DESC</otherwise>
  </choose>
  OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
</select>

<!-- 스레드: 1~3일차 공개+승인 글 리스트 -->
<select id="listPublicThreadByParticipation" parameterType="long" resultType="com.sp.app.model.Challenge">
  SELECT p.postId, p.dayNumber, p.isPublic, p.approvalStatus,
         TO_CHAR(p.regDate,'YYYY-MM-DD HH24:MI:SS') AS postRegDate,
         cp.participationId, cp.challengeId, c.title, NVL(m.nickname,m.name) AS memberName,
         (SELECT photoUrl FROM certificationPhoto ph WHERE ph.postId=p.postId FETCH FIRST 1 ROWS ONLY) AS photoUrl,
         p.content
  FROM certificationPost p
  JOIN challengeParticipation cp ON cp.participationId=p.participationId
  JOIN challenge c ON c.challengeId=cp.challengeId
  JOIN member2 m ON m.memberId=cp.memberId
  WHERE p.participationId=#{participationId}
    AND p.dayNumber IS NOT NULL AND p.isPublic='Y' AND p.approvalStatus=1
  ORDER BY p.dayNumber ASC, p.regDate ASC
</select>
  	
  
</mapper>
