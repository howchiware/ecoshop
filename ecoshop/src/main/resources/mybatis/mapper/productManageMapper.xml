<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.admin.mapper.ProductManageMapper">
<!-- 상품 등록 -->
	<!-- 상품 번호 -->
	<select id="productSeq" resultType="Long">
		SELECT product_seq.NEXTVAL FROM dual
	</select>
	
	<!-- 상품 등록 -->
	<insert id="insertProduct" parameterType="com.sp.app.admin.model.ProductManage">
		INSERT INTO product(productId, productCode, categoryId, productName, price,
				thumbnail, sale, reg_date, optionCount, productShow, point, content, detailInfo)
		VALUES (#{productId}, #{productCode}, #{categoryId}, #{productName}, #{price},
				 #{thumbnail}, #{price}, SYSDATE, #{optionCount}, #{productShow}, 
				 #{point}, #{content}, #{detailInfo})
	</insert>
	
	<!-- 추가 이미지 등록 -->
	<insert id="insertProductPhoto" parameterType="com.sp.app.admin.model.ProductManage">
		INSERT INTO productPhoto(productPhotoNum, productCode, photoName)
		VALUES(productPhoto_seq.NEXTVAL, #{productCode}, #{photoName})
	</insert>
	
	<!-- 옵션 번호 -->
	<select id="optionSeq" resultType="Long">
		SELECT productOption_seq.NEXTVAL FROM dual
	</select>

	<!-- 상품 옵션 등록 -->
	<insert id="insertProductOption" parameterType="com.sp.app.admin.model.ProductManage">
		INSERT INTO productOption(optionNum, optionName, productCode, parentOption)
		VALUES(#{optionNum}, #{optionName}, #{productCode}, #{parentOption, jdbcType=INTEGER})
	</insert>
	
	<!-- 옵션 상세 번호 -->
	<select id="detailSeq" resultType="Long">
		SELECT productOptionDetail_seq.NEXTVAL FROM dual
	</select>

	<!-- 상품 상세 옵션 등록 -->
	<insert id="insertOptionDetail" parameterType="com.sp.app.admin.model.ProductManage">
		INSERT INTO optionDetail(optionDetailNum, optionNum, optionValue)
		VALUES(#{optionDetailNum}, #{optionNum}, #{optionValue})
	</insert>
	
	<!-- 상품 카테고리 -->
	<select id="findByCategory" parameterType="Long" resultType="com.sp.app.admin.model.CategoryManage">
		SELECT categoryId, categoryName, enabled, orderNo
		FROM productCategory
		WHERE categoryId = #{categoryId}
	</select>
	
	<!-- 카테고리 리스트 -->
	<select id="listCategory" resultType="com.sp.app.admin.model.CategoryManage">
		SELECT categoryId, categoryName
		FROM productCategory
		ORDER BY orderNo ASC
	</select>
	
	<!-- 상품 리스트 -->
	<!-- 기본 검색 -->
	<sql id="where-list-schType">
		<if test="schType=='all'">
			(INSTR(p.productName, #{kwd}) > 0 OR INSTR(p.productCode, LTRIM(#{kwd}, '0')) > 0)
		</if>
		<if test="schType=='productCode'">
			INSTR(p.productCode, LTRIM(#{kwd}, '0')) > 0
		</if>
		<if test="schType=='productName'">
			INSTR(p.productName, #{kwd}) > 0
		</if>
	</sql>

	<!-- 카테고리 검색 -->
	<sql id="where-list-categoryId">
			p.categoryId = #{categoryId}
	</sql>
	
	<!-- 날짜 검색 -->
	<sql id="where-list-period">
			${period} 
			BETWEEN TO_DATE(#{periodStart}, 'YYYY-MM-DD')
					AND TO_DATE(#{periodEnd}, 'YYYY-MM-DD')
	</sql>
	
	<!-- 판매가 검색 -->
	<sql id="where-list-price">
			p.price BETWEEN #{priceLowest} AND #{priceHighest} 
	</sql>

	<!-- 재고 검색 -->
	<sql id="where-list-stock">
			ps.totalStock BETWEEN #{stockLowest} AND #{stockHighest}
	</sql>
		
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(DISTINCT p.productCode), 0)
		FROM product p
		LEFT OUTER JOIN (
		    SELECT productCode, NVL(SUM(totalStock), 0) totalStock
		    FROM productStock
		    GROUP BY productCode
		) ps ON p.productCode = ps.productCode
		<if test="kwd != null and kwd != ''">
			WHERE 
			<include refid="where-list-schType"/>
			<if test="categoryId != 0">
				AND <include refid="where-list-categoryId"/>
			</if>
			AND <include refid="where-list-period"/>
			AND <include refid="where-list-price"/>
			AND <include refid="where-list-stock"/>
		</if>
	</select>
		
	<select id="listProduct" parameterType="map" resultType="com.sp.app.admin.model.ProductManage">
		SELECT p.productId, p.productCode, p.categoryId, p.productName, price, optionCount,
			thumbnail, productShow, TO_CHAR(reg_date, 'YYYY-MM-DD') reg_date, TO_CHAR(update_date, 'YYYY-MM-DD') update_date, 
			NVL(totalStock, 0) totalStock
		FROM product p
		LEFT OUTER JOIN (
			SELECT productCode, NVL(SUM(totalStock), 0) totalStock
			FROM productStock
			GROUP BY productCode
		) ps ON p.productCode = ps.productCode
		<if test="kwd != null and kwd != ''">
			WHERE 
			<include refid="where-list-schType"/>
			<if test="categoryId != 0">
				AND <include refid="where-list-categoryId"/>
			</if>
			AND <include refid="where-list-period"/>
			AND <include refid="where-list-price"/>
			AND <include refid="where-list-stock"/>
		</if>
		ORDER BY p.productCode DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

	<!-- 상품 재고 -->
	<!-- 상품 재고 등록 -->
	<insert id="insertProductStock" parameterType="com.sp.app.admin.model.ProductStockManage">
		INSERT INTO productStock(stockNum, productCode, optionDetailNum, optionDetailNum2, totalStock)
		VALUES (productStock_seq.NEXTVAL, #{productCode},
				 #{optionDetailNum, jdbcType=BIGINT}, #{optionDetailNum2, jdbcType=BIGINT}, 
				 #{totalStock})
	</insert>
	
	<!-- 상품 재고 수정 -->
	<update id="updateProductStock" parameterType="com.sp.app.admin.model.ProductStockManage">
		UPDATE productStock SET totalStock = #{totalStock}
		WHERE stockNum = #{stockNum}
	</update>
	
	<delete id="deleteProductStock" parameterType="Long">
		DELETE FROM productStock
		WHERE productCode = #{productCode}
	</delete>
	
	<!-- 상품 재고 리스트 -->
	<select id="listProductStock" parameterType="map" resultType="com.sp.app.admin.model.ProductStockManage">
		SELECT p.productId, p.productName, p.productCode,
			po1.optionNum, po1.optionName,
			po2.optionNum optionNum2, po2.optionName optionName2,
			d1.optionDetailNum, d1.optionValue, 
			d2.optionDetailNum optionDetailNum2, d2.optionValue optionValue2,
		 	ps.stockNum, NVL(ps.totalStock, 0) totalStock
		FROM product p 
		LEFT OUTER JOIN productOption po1 ON p.productCode = po1.productCode AND parentOption IS NULL
		LEFT OUTER JOIN productOption po2 ON po1.optionNum = po2.parentOption
        LEFT OUTER JOIN optionDetail d1 ON po1.optionNum = d1.optionNum
        LEFT OUTER JOIN optionDetail d2 ON po2.optionNum = d2.optionNum
        <choose>
        	<when test="optionCount == 0">
        		LEFT OUTER JOIN productStock ps ON p.productCode = ps.productCode
        	</when>
        	<when test="optionCount == 1">
        		LEFT OUTER JOIN productStock ps ON d1.optionDetailNum = ps.optionDetailNum
        	</when>
        	<otherwise>
        		LEFT OUTER JOIN productStock ps ON d1.optionDetailNum = ps.optionDetailNum AND d2.optionDetailNum = ps.optionDetailNum2
        	</otherwise>
        </choose>
		WHERE p.productId = #{productId}
        ORDER BY optionDetailNum, optionDetailNum2
	</select>
	
	<!-- 상품 상세 정보 -->
	<select id="findById" parameterType="Long" resultType="com.sp.app.admin.model.ProductManage">
		SELECT p.productId, p.productCode, p.categoryId, c.categoryName, p.productName, p.price, 
			p.point, p.content, p.optionCount, p.detailInfo, 
			p.thumbnail, p.productShow, p.reg_date, p.update_date,
			NVL(t.totalStock, 0) totalStock
		FROM product p
		JOIN productCategory c ON p.categoryId = c.categoryId
		LEFT OUTER JOIN (
			SELECT productCode, NVL(SUM(totalStock), 0) totalStock
			FROM productStock
			GROUP BY productCode
		) t ON p.productCode = t.productCode		
		WHERE p.productCode = #{productCode}
	</select>
	
	<select id="listProductPhoto" parameterType="Long" resultType="com.sp.app.admin.model.ProductManage">
		SELECT productPhotoNum, productCode, photoName
		FROM productPhoto
		WHERE productCode = #{productCode}
	</select>

	<!-- 옵션1, 옵션2 -->
	<select id="listProductOption" parameterType="Long" resultType="com.sp.app.admin.model.ProductManage">
		SELECT optionNum, optionName, parentOption, productCode
		FROM productOption
		WHERE productCode = #{productCode}
		ORDER BY parentOption NULLS FIRST, parentOption
	</select>

	<!-- 옵션 상세 정보 -->	
	<select id="listOptionDetail" parameterType="Long" resultType="com.sp.app.admin.model.ProductManage">
		SELECT optionDetailNum, optionNum, optionValue
		FROM optionDetail
		WHERE optionNum = #{optionNum}
		ORDER BY optionDetailNum
	</select>

	<update id="updateProduct" parameterType="com.sp.app.admin.model.ProductManage">
		UPDATE product SET categoryId = #{categoryId}, productName = #{productName},
			price = #{price}, point = #{point},
			optionCount = #{optionCount}, content = #{content}, detailInfo = #{detailInfo},
			thumbnail = #{thumbnail}, productShow = #{productShow}, update_date = SYSDATE
		WHERE productCode = #{productCode}
	</update>
	
	<delete id="deleteProduct" parameterType="Long">
		DELETE FROM product
		WHERE productCode = #{productCode}
	</delete>
	
	<delete id="deleteProductPhoto" parameterType="Long">
		DELETE FROM productPhoto
		WHERE productCode = #{productCode}
	</delete>
	
	<delete id="deleteProductPhotoFile" parameterType="Long">
		DELETE FROM productPhoto
		WHERE productPhotoNum = #{productPhotoNumLong}
	</delete>
	
	<update id="updateProductOption" parameterType="com.sp.app.admin.model.ProductManage">
		UPDATE productOption SET optionName = #{optionName}
		WHERE optionNum = #{optionNum}
	</update>
	
	<delete id="deleteProductOption" parameterType="Long">
		DELETE FROM productOption
		WHERE optionNum = #{optionNum}
	</delete>

	<update id="updateOptionDetail" parameterType="com.sp.app.admin.model.ProductManage">
		UPDATE optionDetail SET optionValue = #{optionValue}
		WHERE optionDetailNum = #{optionDetailNum}
	</update>
	
	<delete id="deleteOptionDetail" parameterType="Long">
		DELETE FROM optionDetail
		WHERE optionDetailNum = #{optionDetailNum}
	</delete>

	<delete id="deleteOptionDetail2" parameterType="Long">
		DELETE FROM optionDetail
		WHERE optionNum = #{optionNum}
	</delete>
	
	<!-- 배송정책 -->
	<select id="listDeliveryRefundInfo" resultType="com.sp.app.admin.model.ProductDeliveryRefundInfoManage">
	    SELECT deliveryInfo, refundInfo
	    FROM deliveryRefundInfo
	</select>

	<select id="listDeliveryFee" resultType="com.sp.app.admin.model.ProductDeliveryRefundInfoManage">
	    SELECT fee, deliveryLocation
	    FROM deliveryFee
	</select>
	
	<insert id="insertProductDeliveryRefundInfo" parameterType="com.sp.app.admin.model.ProductDeliveryRefundInfoManage">
		INSERT INTO deliveryRefundInfo(deliveryRefundInfoNum, deliveryInfo, refundInfo)
		VALUES (deliveryRefundInfo_seq.NEXTVAL, #{deliveryInfo}, #{refundInfo})
	</insert>

	<insert id="insertProductDeliveryFee" parameterType="map">
		INSERT INTO deliveryFee(deliveryFeeNum, fee, deliveryLocation)
		VALUES (deliveryFee_seq.NEXTVAL, #{fee}, #{deliveryLocation})
	</insert>
	
	<update id="updateProductDeliveryRefundInfo" parameterType="com.sp.app.admin.model.ProductDeliveryRefundInfoManage">
		UPDATE deliveryRefundInfo SET deliveryInfo = #{deliveryInfo}, refundInfo = #{refundInfo}
	</update>

	<update id="deleteProductDeliveryFee">
		DELETE FROM deliveryFee
	</update>
	
	<select id="optionFindByCode" parameterType="long" resultType="long">
	    SELECT optionNum
	    FROM productOption
	    WHERE productCode = #{productCode}
	</select>
	
	<select id="photoFindByCode" parameterType="long" resultType="long">
	    SELECT productPhotoNum
	    FROM productPhoto
	    WHERE productCode = #{productCode}
	</select>
	
	<select id="isBoughtByProductCode" parameterType="long" resultType="com.sp.app.admin.model.ProductManage">
	    SELECT *
	    FROM orderDetail
	    WHERE productCode = #{productCode}
	</select>
	
</mapper>