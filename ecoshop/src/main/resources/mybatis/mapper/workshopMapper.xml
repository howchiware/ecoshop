<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.WorkshopMapper">
	<!-- 카테고리 -->
	<insert id="insertCategory"
		parameterType="com.sp.app.model.Workshop">
		INSERT INTO programCategory (categoryId, categoryName)
		VALUES (programCategory_seq.NEXTVAL, #{categoryName})
	</insert>

	<update id="updateCategory"
		parameterType="com.sp.app.model.Workshop">
		UPDATE programCategory
		SET categoryName = #{categoryName}
		WHERE categoryId = #{categoryId}
	</update>

	<delete id="deleteCategory" parameterType="Long">
		DELETE FROM
		programCategory WHERE categoryId = #{value}
	</delete>

	<select id="listCategory" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT categoryId, categoryName
		FROM programCategory
		ORDER BY
		categoryId DESC
		OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>

	<!-- 프로그램 -->
	<insert id="insertProgram"
		parameterType="com.sp.app.model.Workshop">
		INSERT INTO program (programId, categoryId,
		programTitle, programContent)
		VALUES (program_seq.NEXTVAL,
		#{categoryId}, #{programTitle},
		#{programContent})
	</insert>

	<select id="listProgram" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT p.programId, p.categoryId, c.categoryName, p.programTitle,
		p.programContent, p.regDate, p.updDate
		FROM program p
		LEFT JOIN
		programCategory c
		ON p.categoryId = c.categoryId
		<where>
			<include refid="where-list" />
		</where>
		ORDER BY p.regDate DESC, p.programId DESC
		OFFSET #{offset} ROWS FETCH
		NEXT #{size} ROWS ONLY
	</select>


	<!-- 검색 조건 -->
	<sql id="where-list">
		<trim prefixOverrides="AND">
			<if test="kwd != null and kwd != ''">
				AND (LOWER(programTitle) LIKE '%' || LOWER(#{kwd}) || '%'
				OR LOWER(programContent) LIKE '%' || LOWER(#{kwd}) || '%')
			</if>
			<if test="categoryId != null">
				AND p.categoryId = #{categoryId}
			</if>
		</trim>
	</sql>

	<!-- 총 개수 -->
	<select id="programDataCount" parameterType="map"
		resultType="int">
		SELECT NVL(COUNT(*), 0)
		FROM program
		<where>
			<include refid="where-list" />
		</where>
	</select>

	<select id="findProgramById" parameterType="Long"
		resultType="com.sp.app.model.Workshop">
		SELECT programId, categoryId, programTitle, programContent,
		regDate, updDate
		FROM program
		WHERE programId = #{value}
	</select>

	<update id="updateProgram"
		parameterType="com.sp.app.model.Workshop">
		UPDATE program SET programTitle = #{programTitle},
		programContent =
		#{programContent}, updDate = SYSDATE
		WHERE programId =
		#{programId}
	</update>

	<delete id="deleteProgram" parameterType="Long">
		DELETE FROM program
		WHERE programId = #{value}
	</delete>

	<!-- 담당자 -->
	<insert id="insertManager"
		parameterType="com.sp.app.model.Workshop">
		INSERT INTO workshopManager (managerId, name, tel,
		email, department)
		VALUES (manager_seq.NEXTVAL, #{name}, #{tel},
		#{email}, #{department})
	</insert>

	<select id="listManager" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT managerId, name, tel, email, department
		FROM workshopManager
		<where>
			<include refid="where-list-manager" />
		</where>
		ORDER BY managerId ASC
		OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS
		ONLY
	</select>

	<sql id="where-list-manager">
		<trim prefixOverrides="AND">
			<if test="kwd != null and kwd != ''">
				AND (LOWER(name) LIKE '%' || LOWER(#{kwd}) || '%'
				OR
				LOWER(department) LIKE '%' || LOWER(#{kwd}) || '%')
			</if>
			<if test="managerId != null">
				AND managerId = #{managerId}
			</if>
		</trim>
	</sql>

	<select id="managerDataCount" parameterType="map"
		resultType="int">
		SELECT NVL(COUNT(*), 0)
		FROM workshopManager
		<where>
			<include refid="where-list-manager" />
		</where>
	</select>

	<select id="findManagerById" parameterType="Long"
		resultType="com.sp.app.model.Workshop">
		SELECT managerId, name, tel, email, department
		FROM
		workshopManager
		WHERE managerId = #{value}
	</select>

	<update id="updateManager"
		parameterType="com.sp.app.model.Workshop">
		UPDATE workshopManager
		SET name = #{name}, tel = #{tel},
		email = #{email}, department =
		#{department}
		WHERE managerId =
		#{managerId}
	</update>

	<delete id="deleteManager" parameterType="Long">
		DELETE FROM
		workshopManager
		WHERE managerId = #{value}
	</delete>

	<!-- 워크샵 -->
	<insert id="insertWorkshop"
		parameterType="com.sp.app.model.Workshop">
		<selectKey keyProperty="workshopId" resultType="long"
			order="BEFORE">
			SELECT workshop_seq.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO workshop (workshopId, programId, managerId, workshopTitle,
		scheduleDate, applyDeadline, location,
		workshopStatus, capacity,
		thumbnailPath, workshopContent, regDate, updDate)
		VALUES
		(#{workshopId}, #{programId}, #{managerId}, #{workshopTitle},
		#{scheduleDate, jdbcType=TIMESTAMP},
		#{applyDeadline,
		jdbcType=TIMESTAMP}, #{location}, #{workshopStatus}, #{capacity},
		#{thumbnailPath, jdbcType=VARCHAR}, #{workshopContent}, SYSDATE,
		SYSDATE)
	</insert>

	<select id="listWorkshop" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT w.workshopId, w.programId, w.managerId, p.programTitle,
		w.workshopTitle, w.scheduleDate, w.applyDeadline, w.location,
		w.workshopStatus, w.capacity, w.thumbnailPath, w.workshopContent,
		w.regDate, w.updDate
		FROM workshop w
		LEFT JOIN program p ON w.programId
		= p.programId
		<where>
			<include refid="where-list-workshop" />
		</where>
		ORDER BY w.regDate DESC, w.workshopId DESC
		OFFSET #{offset} ROWS FETCH
		NEXT #{size} ROWS ONLY
	</select>

	<sql id="where-list-workshop">
		<trim prefixOverrides="AND">
			<if test="kwd != null and kwd != ''">
				AND (LOWER(w.workshopTitle) LIKE '%' || LOWER(#{kwd}) ||
				'%'
				OR LOWER(w.workshopContent) LIKE '%' || LOWER(#{kwd}) || '%')
			</if>
			<if test="workshopStatus != null and workshopStatus != ''">
				AND w.workshopStatus = #{workshopStatus}
			</if>
			<if test="workshopId != null">
				AND w.workshopId = #{workshopId}
			</if>
		</trim>
	</sql>

	<select id="workshopDataCount" parameterType="map"
		resultType="int">
		SELECT NVL(COUNT(*), 0)
		FROM workshop w
		LEFT JOIN program p ON
		w.programId = p.programId
		<where>
			<include refid="where-list-workshop" />
		</where>
	</select>


	<select id="findWorkshopById" parameterType="Long"
		resultType="com.sp.app.model.Workshop">
		SELECT workshopId, programId, managerId, workshopTitle,
		scheduleDate,
		applyDeadline, location,
		workshopStatus, capacity,
		thumbnailPath,
		workshopContent, regDate, updDate
		FROM workshop
		WHERE
		workshopId = #{num}
	</select>

	<update id="updateWorkshop"
		parameterType="com.sp.app.model.Workshop">
		UPDATE workshop
		SET workshopTitle = #{workshopTitle},
		scheduleDate = #{scheduleDate,
		jdbcType=TIMESTAMP}, applyDeadline =
		#{applyDeadline,
		jdbcType=TIMESTAMP},
		location = #{location},
		workshopStatus = #{workshopStatus}, capacity =
		#{capacity},
		thumbnailPath = #{thumbnailPath},
		workshopContent = #{workshopContent},
		updDate = SYSDATE
		WHERE workshopId = #{workshopId}
	</update>

	<delete id="deleteWorkshop" parameterType="Long">
		DELETE FROM workshop
		WHERE workshopId = #{value}
	</delete>

	<!-- 워크샵 사진 -->
	<insert id="insertWorkshopPhoto"
		parameterType="com.sp.app.model.Workshop">
		INSERT INTO workshopPhoto (photoId, workshopId,
		workshopImagePath)
		VALUES (workshopPhoto_seq.NEXTVAL, #{workshopId},
		#{workshopImagePath})
	</insert>

	<select id="workshopPhotoDataCount" parameterType="map"
		resultType="Long">
		SELECT NVL(COUNT(*), 0)
		FROM workshopPhoto
	</select>

	<!-- 특정 워크샵 사진 목록 -->
	<select id="listWorkshopPhoto" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT photoId, workshopId, workshopImagePath
		FROM
		workshopPhoto
		WHERE workshopId = #{workshopId}
	</select>

	<!-- 사진 단건 조회 -->
	<select id="findWorkshopPhotoById" parameterType="Long"
		resultType="com.sp.app.model.Workshop">
		SELECT photoId, workshopId, workshopImagePath
		FROM
		workshopPhoto
		WHERE photoId = #{value}
	</select>

	<!-- 사진 단건 삭제 -->
	<delete id="deleteWorkshopPhotoById" parameterType="Long">
		DELETE FROM
		workshopPhoto
		WHERE photoId = #{value}
	</delete>

	<!-- 워크샵 삭제 시 모든 사진 삭제 -->
	<delete id="deleteWorkshopPhotosByWorkshopId"
		parameterType="Long">
		DELETE FROM workshopPhoto
		WHERE workshopId = #{value}
	</delete>

	<!-- 출석체크 -->
	<update id="markAttendance"
		parameterType="com.sp.app.model.Participant">
		UPDATE participant
		SET
		isAttended = #{isAttended}
		WHERE
		participantId = #{participantId}
	</update>

	<!-- 사용자 -->
	<!-- 워크샵 목록 -->
	<select id="listUserWorkshop" parameterType="map"
		resultType="com.sp.app.model.Workshop">
		SELECT w.workshopId, w.workshopTitle, w.scheduleDate, w.applyDeadline,
		w.location,
		w.workshopStatus, w.capacity, w.thumbnailPath,
		pc.categoryName
		FROM workshop w
		JOIN program p ON w.programId =
		p.programId
		JOIN programCategory pc ON p.categoryId = pc.categoryId
		<where>
			<if test="categoryId != null">
				AND pc.categoryId = #{categoryId}
			</if>

			<if test="onlyRecruiting == true">
				AND w.workshopStatus = 1
				AND w.applyDeadline >= SYSDATE

			</if>
		</where>
		<choose>
			<when test="sort == 'deadline'">
				ORDER BY w.applyDeadline ASC NULLS LAST
			</when>
			<otherwise>
				ORDER BY w.regDate DESC, w.workshopId DESC
			</otherwise>
		</choose>
		OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>

	<select id="userWorkshopDataCount" parameterType="map"
		resultType="int">
		SELECT NVL(COUNT(*), 0)
		FROM workshop w
		JOIN program p ON w.programId =
		p.programId
		JOIN programCategory pc ON p.categoryId = pc.categoryId
		<where>
			<if test="categoryId != null">
				AND pc.categoryId = #{categoryId}
			</if>
			<if test="onlyRecruiting == true">
				AND w.workshopStatus = 1
			</if>
		</where>
	</select>

	<!-- 워크샵 상세 -->
	<select id="findWorkshopDetail" parameterType="long"
		resultType="com.sp.app.model.Workshop">
		SELECT w.workshopId, w.workshopTitle, w.scheduleDate,
		w.applyDeadline,
		w.location,
		w.workshopStatus, w.capacity,
		w.workshopContent,
		w.thumbnailPath, pc.categoryName
		FROM workshop w
		JOIN
		program p ON w.programId = p.programId
		JOIN programCategory pc ON
		p.categoryId = pc.categoryId
		WHERE w.workshopId = #{value}
	</select>

	<!-- [사용자] FAQ 목록 -->
	<select id="listFaq" parameterType="map"
		resultType="com.sp.app.model.WorkshopFaq">
		SELECT faqId, programId, question, answer, regDate
		FROM
		programFaq
		WHERE programId = #{programId}
		ORDER BY regDate DESC
	</select>

	<insert id="insertFaq"
		parameterType="com.sp.app.model.WorkshopFaq">
		INSERT INTO programFaq (faqId, programId, question,
		answer, regDate)
		VALUES (programFaq_seq.NEXTVAL, #{programId},
		#{question}, #{answer},
		SYSDATE)
	</insert>

	<update id="updateFaq"
		parameterType="com.sp.app.model.WorkshopFaq">
		UPDATE programFaq
		SET question = #{question}, answer =
		#{answer}, regDate = SYSDATE
		WHERE faqId = #{faqId}
	</update>

	<delete id="deleteFaq" parameterType="map">
		DELETE FROM programFaq
		WHERE faqId = #{faqId}
	</delete>

	<select id="findProgramIdByWorkshopId" parameterType="long"
		resultType="long">
		SELECT programId
		FROM workshop
		WHERE workshopId =
		#{workshopId}
	</select>

	<select id="findFaqById" parameterType="long"
		resultType="com.sp.app.model.WorkshopFaq">
		SELECT faqId, programId, question, answer, regDate
		FROM
		programFaq
		WHERE faqId = #{value}
	</select>

	<select id="reviewDataCount" parameterType="map"
		resultType="int">
		SELECT NVL(COUNT(*), 0)
		FROM workshopReview
		<where>
			<if test="workshopId != null">AND workshopId = #{workshopId}</if>
			<if test="participantId != null">AND participantId = #{participantId}</if>
		</where>
	</select>

	<select id="listUserReview" parameterType="map"
		resultType="com.sp.app.model.WorkshopReview">
		SELECT w.workshopReviewId, w.participantId,
		w.reviewContent,
		w.regDate, TO_CHAR(w.regDate, 'YYYY-MM-DD') AS
		regDateStr, w.workshopId,
		m.name AS writerName
		FROM workshopReview w
		JOIN participant p ON w.participantId = p.participantId
		LEFT JOIN
		member2 m ON p.memberId = m.memberId
		WHERE w.workshopId = #{workshopId}
		ORDER BY w.regDate DESC
		OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS
		ONLY
	</select>

	<insert id="insertReview"
		parameterType="com.sp.app.model.WorkshopReview">
		<selectKey keyProperty="workshopReviewId" resultType="long"
			order="BEFORE">
			SELECT workshopReview_seq.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO workshopReview (
		workshopReviewId,
		participantId,
		reviewContent, regDate, workshopId
		) VALUES (
		#{workshopReviewId},
		#{participantId}, #{reviewContent},
		SYSDATE, #{workshopId}
		)
	</insert>

	<select id="isParticipantOfMember" resultType="int">
		SELECT COUNT(*)
		FROM participant
		WHERE participantId = #{participantId}
		AND memberId =
		#{memberId}
		AND participantStatus = 1
		AND isAttended = 'Y'
	</select>

	<select id="findParticipantById" resultType="long">
		SELECT participantId
		FROM participant
		WHERE memberId = #{memberId}
		AND workshopId =
		#{workshopId}
		AND participantStatus = 1
		AND isAttended = 'Y'
		FETCH FIRST
		1 ROWS ONLY
	</select>

	<!-- 신청 여부 -->
	<select id="hasApplied" parameterType="map" resultType="int">
		SELECT
		NVL(COUNT(*), 0)
		FROM participant
		WHERE memberId = #{memberId}
		AND
		workshopId = #{workshopId}
		AND
		participantStatus = 1
	</select>

	<select id="countParticipantofMember" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM Participant
		WHERE participantId =
		#{participantId}
		AND memberId = #{memberId}
		AND isAttended = 'Y'
	</select>

	<!-- 신청 인원 -->
	<select id="countAppliedByWorkshop" parameterType="long"
		resultType="int">
		SELECT NVL(COUNT(*), 0)
		FROM participant
		WHERE workshopId =
		#{value}
		AND participantStatus = 1
	</select>

	<!-- 워크샵 상태 -->
	<select id="findWorkshopStatusAndCapacity" parameterType="long"
		resultType="com.sp.app.model.Workshop">
		SELECT workshopStatus, capacity, applyDeadline
		FROM workshop
		WHERE workshopId = #{value}
	</select>

	<insert id="applyWorkshop" parameterType="map">
		INSERT INTO participant
		(participantId, workshopId, memberId,
		participantStatus,
		isAttended,
		appliedDate)
		VALUES (participant_seq.NEXTVAL, #{workshopId},
		#{memberId}, 1, 'N',
		SYSDATE)
	</insert>

	<update id="cancelApplication" parameterType="map">
		UPDATE participant
		SET participantStatus = 0
		WHERE memberId = #{memberId}
		AND workshopId =
		#{workshopId}
		AND
		participantStatus = 1
	</update>

	<!-- 참여자 목록 -->
	<select id="listParticipant" parameterType="map"
		resultType="com.sp.app.model.Participant">
		SELECT p.participantId, p.memberId, m.name, m.tel, m.email,
		p.participantStatus, p.isAttended, p.appliedDate
		FROM participant p
		LEFT JOIN member2 m ON p.memberId = m.memberId
		WHERE p.workshopId =
		#{workshopId}
		ORDER BY p.appliedDate ASC
	</select>

	<update id="updateParticipantStatus" parameterType="map">
		UPDATE
		participant
		SET participantStatus = #{participantStatus}
		WHERE
		participantId = #{participantId}
	</update>

	<update id="updateAttendance" parameterType="map">
		UPDATE participant
		SET isAttended = #{isAttended}
		WHERE participantId = #{participantId}
	</update>

	<update id="updateWorkshopStatus"
		parameterType="com.sp.app.model.Workshop">
		UPDATE workshop
		SET workshopStatus = #{workshopStatus},
		updDate = SYSDATE
		WHERE workshopId = #{workshopId}
	</update>

	<select id="findMemberById" parameterType="long"
		resultType="com.sp.app.admin.model.MemberManage">
		SELECT memberId, name, tel, email
		FROM member2
		WHERE memberId
		= #{memberId}
	</select>

	<!-- 관리자: 후기 작성자 + 지급여부 -->
	<select id="listReviewRewardRows" parameterType="map"
		resultType="map">
		SELECT
		m.name AS "memberName",
		wks.workshopTitle AS "workshopTitle",
		wr.workshopReviewId AS "workshopReviewId",
		wr.participantId AS "participantId",
		wr.workshopId AS "workshopId",
		p.memberId AS "memberId",
		CASE WHEN pnt.pointId IS NULL THEN 0 ELSE 1 END AS "paid"
		FROM workshopReview wr
		JOIN participant p ON wr.participantId = p.participantId
		JOIN member2 m ON p.memberId = m.memberId
		JOIN workshop wks ON wr.workshopId = wks.workshopId
		LEFT JOIN point pnt
		ON pnt.memberId = p.memberId
		AND pnt.orderId = ('REVIEW:' || wr.workshopReviewId)
		<where>
			<if test="workshopId != null">
				AND wr.workshopId = #{workshopId}
			</if>
		</where>
		ORDER BY wr.regDate DESC
		OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
	</select>



	<select id="countReviewRewardRows" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM workshopReview wr
		<if test="workshopId != null">
			WHERE wr.workshopId = #{workshopId}
		</if>
	</select>

	<select id="findMemberIdByParticipantId" parameterType="long"
		resultType="long">
		SELECT memberId
		FROM participant
		WHERE participantId =
		#{participantId}
	</select>

</mapper>