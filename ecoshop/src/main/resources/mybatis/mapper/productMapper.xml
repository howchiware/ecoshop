<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.ProductMapper">
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) count
		FROM product
		WHERE categoryId = #{categoryId}
	</select>
	
	<!-- 
	<select id="listProductByCategoryId" parameterType="map" resultType="com.sp.app.model.Product">
        SELECT productId, productCode, categoryId, productName, price, thumbnail, sale, reg_date, optionCount,
        		productShow, update_date, point, content, detailInfo
        FROM product
        WHERE categoryId = #{categoryId} AND productShow = 1
        OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
    </select>
    -->
    <select id="listAllProducts" resultType="com.sp.app.model.Product">
        SELECT productId, productCode, categoryId, productName, price, thumbnail, sale, reg_date, optionCount,
        		productShow, update_date, point, content, detailInfo
        FROM product
    </select>
    
    <select id="listFiveProducts" resultType="com.sp.app.model.Product">
        SELECT productId, p.productCode, categoryId, productName, price, thumbnail, sale, reg_date, optionCount,
        		productShow, update_date, point, content, detailInfo, NVL(orderCount, 0) orderCount
        FROM product p
		LEFT OUTER JOIN (
            SELECT productCode, NVL(COUNT(*), 0) orderCount
			FROM orderDetail
			GROUP BY productCode) od ON p.productCode = od.productCode
        ORDER BY orderCount DESC
        OFFSET 0 ROWS FETCH FIRST 5 ROWS ONLY
    </select>
    
    <select id="listThreeProducts" resultType="com.sp.app.model.Product">
        SELECT productId, p.productCode, categoryId, productName, price, thumbnail, sale, reg_date, optionCount,
        		productShow, update_date, point, content, detailInfo, NVL(orderCount, 0) orderCount
        FROM product p
		LEFT OUTER JOIN (
            SELECT productCode, NVL(COUNT(*), 0) orderCount
			FROM orderDetail
			GROUP BY productCode) od ON p.productCode = od.productCode
        ORDER BY orderCount DESC
        OFFSET 0 ROWS FETCH FIRST 3 ROWS ONLY
    </select>
    
    <select id="listProductByCategoryId" parameterType="long" resultType="com.sp.app.model.Product">
		SELECT productId, p.productCode, categoryId, productName, price, thumbnail, sale, reg_date, optionCount,
        		productShow, update_date, point, content, detailInfo, NVL(reviewCount, 0) reviewCount, NVL(orderCount, 0) orderCount
        FROM product p
        LEFT OUTER JOIN (
	        SELECT productCode, NVL(COUNT(*), 0) reviewCount
			FROM productReview
			GROUP BY productCode) pr ON p.productCode = pr.productCode
        LEFT OUTER JOIN (
            SELECT productCode, NVL(COUNT(*), 0) orderCount
			FROM orderDetail
			GROUP BY productCode) od ON p.productCode = od.productCode
        WHERE categoryId = #{categoryId} AND productShow = 1
        <choose>
			<when test="sortBy==4">
				ORDER BY reviewCount DESC
			</when>
			<when test="sortBy==3">
				ORDER BY price ASC  
			</when>
			<when test="sortBy==2">
				ORDER BY price DESC
			</when>
			<when test="sortBy==1">
				ORDER BY orderCount DESC
			</when>
			<when test="sortBy==0">
				ORDER BY reg_date ASC
			</when>
		</choose>
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
    </select>
    
    <select id="findById" parameterType="Long" resultType="com.sp.app.model.Product">
		SELECT p.productCode, p.productId, p.categoryId, p.productShow, categoryName, 
		    productName, price, point, optionCount,
			thumbnail, p.content, p.detailInfo, p.reg_date, totalStock,
			NVL(rate, 0) rate, NVL(reviewCount, 0) reviewCount,
			NVL(inquiryCount, 0) inquiryCount
		FROM product p
		JOIN productCategory c ON p.categoryId = c.categoryId
		LEFT OUTER JOIN (
			SELECT productCode, NVL(SUM(totalStock), 0) totalStock
			FROM productStock
			GROUP BY productCode
		) ps ON p.productCode = ps.productCode
		LEFT OUTER JOIN (
			SELECT productCode, ROUND(AVG(rate), 1) rate, COUNT(*) reviewCount
			FROM productReview
			WHERE showReview = 1
			GROUP BY productCode
		) t ON p.productCode = t.productCode
		LEFT OUTER JOIN (
			SELECT productCode, COUNT(*) inquiryCount
			FROM productInquiry
			WHERE showQuestion = 1
			GROUP BY productCode
		) q ON p.productCode = q.productCode
		LEFT OUTER JOIN (
			SELECT productCode, COUNT(*) saleCount
			FROM orderDetail
			GROUP BY productCode
		) pc ON p.productCode = pc.productCode
		WHERE p.productShow = 1 AND p.productCode = #{productCode}
		FETCH FIRST 1 ROWS ONLY
    </select>
    
    <!-- 카테고리 -->
	<select id="findByCategoryId" parameterType="Long" resultType="com.sp.app.model.Product">
		SELECT categoryId, categoryName, enabled, orderNo
		FROM productCategory
		WHERE categoryId = #{categoryId}
	</select>
    
    <!-- 상품 상세 사진 -->
    <select id="listProductPhoto" parameterType="Long"  resultType="com.sp.app.model.Product">
    	SELECT productPhotoNum, productCode, photoName
    	FROM productPhoto
    	WHERE productCode = #{productId}
    </select>
    
    <!-- 상품 옵션 리스트-->
	<select id="listProductOption" parameterType="Long" resultType="com.sp.app.model.Product">
		SELECT optionNum, optionName, parentOption, productCode
		FROM productOption
		WHERE productCode = #{productId}
		ORDER BY parentOption NULLS FIRST, parentOption
	</select>
	
	<!-- 상품 옵션별 상세 옵션 리스트-->
	<select id="listOptionDetail" parameterType="Long" resultType="com.sp.app.model.Product">
		SELECT optionDetailNum, optionNum, optionValue
		FROM optionDetail
		WHERE optionNum = #{optionNum}
		ORDER BY optionDetailNum
	</select>

	<!-- 상품에 대한 재고 수량 -->
	<select id="listOptionDetailStock" parameterType="map" resultType="com.sp.app.model.Product">
    	SELECT ps.stockNum, ps.productCode, ps.optionDetailNum, ps.optionDetailNum2, ps.totalStock,
    		po1.optionNum, po1.optionName,
    		po2.optionNum optionNum2, po2.optionName optionName2,
    		d1.optionDetailNum, d1.optionValue,
    		d2.optionDetailNum optionDetailNum2, d2.optionValue optionValue2
    	FROM (
    		SELECT stockNum, productCode, optionDetailNum, optionDetailNum2, totalStock
    		FROM productStock
    		WHERE productCode = #{productId} 
    		<if test="optionDetailNum != null and optionDetailNum != 0">
				AND optionDetailNum = #{optionDetailNum}
    		</if>
    	) ps
    	LEFT OUTER JOIN (
            SELECT productCode, optionNum, optionName, parentOption 
            FROM productOption 
            WHERE productCode = #{productId} AND parentOption IS NULL
    	) po1 ON ps.productCode = po1.productCode
		LEFT OUTER JOIN (
            SELECT optionNum, optionName, parentOption
            FROM productOption
			WHERE productCode = #{productId} AND parentOption IS NOT NULL
        ) po2 ON po1.optionNum = po2.parentOption
    	LEFT OUTER JOIN optionDetail d1 ON ps.optionDetailNum = d1.optionDetailNum
    	LEFT OUTER JOIN optionDetail d2 ON ps.optionDetailNum2 = d2.optionDetailNum
    	WHERE NVL(ps.totalStock, 0) &gt; 0
    	ORDER BY ps.optionDetailNum, ps.optionDetailNum2
	</select>
    
    <!-- 배송정책 -->
	<select id="listDeliveryRefundInfo" resultType="com.sp.app.model.ProductDeliveryRefundInfo">
	    SELECT deliveryInfo, refundInfo
	    FROM deliveryRefundInfo
	</select>

	<select id="listDeliveryFee" resultType="com.sp.app.model.ProductDeliveryRefundInfo">
	    SELECT fee, deliveryLocation
	    FROM deliveryFee
	</select>
    
</mapper>